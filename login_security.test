<?php

/**
 * @file
 * Test the basic functions of the Login Security module.
 */

/**
 * Test login_security interface.
 */
class LoginSecurityInterfaceTest extends BackdropWebTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Login Security interface'),
      'description' => t("Test Login Security's web interface"),
      'group' => t('Login Security'),
    );
  }

  public function setUp() {
    parent::setUp('login_security');
    // Create and login user.
    $admin_user = $this->backdropCreateUser(array('administer site configuration'));
    $this->backdropLogin($admin_user);
    // Set time tracking window to 30 minutes.
    config_set('login_security.settings', 'login_security_track_time', 30);
  }

  /**
   * Test admin user settings.
   */
  public function testAdminUserSettings() {
    $this->backdropGet('admin/config/people/login_security');
    $this->assertResponse(200, t('Access granted to settings page.'));
    $this->assertField('login_security_track_time', t('Track time field exists.'));
    $this->assertField('login_security_user_wrong_count', t('User wrong count field exists.'));
  }
}

/**
 * Test login_security user blocking.
 */
class LoginSecurityUserBlockingTest extends BackdropWebTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Login Security userblock functional'),
      'description' => t("Test Login Security's user-blocking restrictions and default messages."),
      'group' => t('Login Security'),
    );
  }

  public function setUp() {
    parent::setUp('login_security');
    // Ensure the table has no entries.
    db_query("TRUNCATE TABLE {login_security}");
    // Set time tracking window to 30 minutes.
    config_set('login_security.settings', 'login_security_track_time', 30);
  }

  /**
   * Check if login is broken somewhere.
   */
  public function testLogin() {
    config_set('login_security.settings', 'login_security_user_wrong_count', 5);
    $normal_user = $this->backdropCreateUser(array('access content'));
    $this->backdropLogin($normal_user);
    $this->assertNoText("This account is temporarily disabled.", t('Disabled account message not displayed.'));
  }

  /**
   * Alternative to backdropLogin().
   *
   * backdropLogin() has assertions that we know will fail.
   */
  public function backdropLoginLite(stdClass $user) {
    if ($this->loggedInUser) {
      $this->backdropLogout();
    }

    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw,
    );
    $this->backdropPost('user', $edit, t('Log in'));
    $this->assertResponse(200, t('Login page reloaded.'));

    $this->loggedInUser = TRUE;
  }
}
